/* tslint:disable */
/* eslint-disable */
/**
 * Municipality API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ArticleDto } from '../dto';
// @ts-ignore
import { CreateArticleRequest } from '../dto';
// @ts-ignore
import { PageDtoArticleWithoutContentArticleWithoutContentDto } from '../dto';
/**
 * ArticleRestServiceApi - axios parameter creator
 * @export
 */
export const ArticleRestServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allArticles: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/articles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateArticleRequest} createArticleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArticle: async (createArticleRequest: CreateArticleRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createArticleRequest' is not null or undefined
            assertParamExists('createArticle', 'createArticleRequest', createArticleRequest)
            const localVarPath = `/articles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createArticleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} articleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticle: async (articleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            assertParamExists('deleteArticle', 'articleId', articleId)
            const localVarPath = `/articles/{articleId}`
                .replace(`{${"articleId"}}`, encodeURIComponent(String(articleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} articleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticle: async (articleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            assertParamExists('getArticle', 'articleId', articleId)
            const localVarPath = `/articles/{articleId}`
                .replace(`{${"articleId"}}`, encodeURIComponent(String(articleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticleRestServiceApi - functional programming interface
 * @export
 */
export const ArticleRestServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArticleRestServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allArticles(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageDtoArticleWithoutContentArticleWithoutContentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allArticles(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateArticleRequest} createArticleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createArticle(createArticleRequest: CreateArticleRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createArticle(createArticleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} articleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteArticle(articleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteArticle(articleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} articleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArticle(articleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getArticle(articleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArticleRestServiceApi - factory interface
 * @export
 */
export const ArticleRestServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArticleRestServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allArticles(page?: number, options?: any): AxiosPromise<PageDtoArticleWithoutContentArticleWithoutContentDto> {
            return localVarFp.allArticles(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateArticleRequest} createArticleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createArticle(createArticleRequest: CreateArticleRequest, options?: any): AxiosPromise<string> {
            return localVarFp.createArticle(createArticleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} articleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteArticle(articleId: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteArticle(articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} articleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticle(articleId: string, options?: any): AxiosPromise<ArticleDto> {
            return localVarFp.getArticle(articleId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArticleRestServiceApi - interface
 * @export
 * @interface ArticleRestServiceApi
 */
export interface ArticleRestServiceApiInterface {
    /**
     * 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleRestServiceApiInterface
     */
    allArticles(page?: number, options?: any): AxiosPromise<PageDtoArticleWithoutContentArticleWithoutContentDto>;

    /**
     * 
     * @param {CreateArticleRequest} createArticleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleRestServiceApiInterface
     */
    createArticle(createArticleRequest: CreateArticleRequest, options?: any): AxiosPromise<string>;

    /**
     * 
     * @param {string} articleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleRestServiceApiInterface
     */
    deleteArticle(articleId: string, options?: any): AxiosPromise<string>;

    /**
     * 
     * @param {string} articleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleRestServiceApiInterface
     */
    getArticle(articleId: string, options?: any): AxiosPromise<ArticleDto>;

}

/**
 * ArticleRestServiceApi - object-oriented interface
 * @export
 * @class ArticleRestServiceApi
 * @extends {BaseAPI}
 */
export class ArticleRestServiceApi extends BaseAPI implements ArticleRestServiceApiInterface {
    /**
     * 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleRestServiceApi
     */
    public allArticles(page?: number, options?: any) {
        return ArticleRestServiceApiFp(this.configuration).allArticles(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateArticleRequest} createArticleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleRestServiceApi
     */
    public createArticle(createArticleRequest: CreateArticleRequest, options?: any) {
        return ArticleRestServiceApiFp(this.configuration).createArticle(createArticleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} articleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleRestServiceApi
     */
    public deleteArticle(articleId: string, options?: any) {
        return ArticleRestServiceApiFp(this.configuration).deleteArticle(articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} articleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleRestServiceApi
     */
    public getArticle(articleId: string, options?: any) {
        return ArticleRestServiceApiFp(this.configuration).getArticle(articleId, options).then((request) => request(this.axios, this.basePath));
    }
}
