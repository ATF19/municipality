/* tslint:disable */
/* eslint-disable */
/**
 * Municipality API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InformationDto } from '../dto';
/**
 * InformationRestServiceApi - axios parameter creator
 * @export
 */
export const InformationRestServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InformationDto} informationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveInformation: async (informationDto: InformationDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'informationDto' is not null or undefined
            assertParamExists('saveInformation', 'informationDto', informationDto)
            const localVarPath = `/information`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(informationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InformationRestServiceApi - functional programming interface
 * @export
 */
export const InformationRestServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InformationRestServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInformation(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InformationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInformation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InformationDto} informationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveInformation(informationDto: InformationDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveInformation(informationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InformationRestServiceApi - factory interface
 * @export
 */
export const InformationRestServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InformationRestServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation(options?: any): AxiosPromise<InformationDto> {
            return localVarFp.getInformation(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InformationDto} informationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveInformation(informationDto: InformationDto, options?: any): AxiosPromise<string> {
            return localVarFp.saveInformation(informationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InformationRestServiceApi - interface
 * @export
 * @interface InformationRestServiceApi
 */
export interface InformationRestServiceApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InformationRestServiceApiInterface
     */
    getInformation(options?: any): AxiosPromise<InformationDto>;

    /**
     * 
     * @param {InformationDto} informationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InformationRestServiceApiInterface
     */
    saveInformation(informationDto: InformationDto, options?: any): AxiosPromise<string>;

}

/**
 * InformationRestServiceApi - object-oriented interface
 * @export
 * @class InformationRestServiceApi
 * @extends {BaseAPI}
 */
export class InformationRestServiceApi extends BaseAPI implements InformationRestServiceApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InformationRestServiceApi
     */
    public getInformation(options?: any) {
        return InformationRestServiceApiFp(this.configuration).getInformation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InformationDto} informationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InformationRestServiceApi
     */
    public saveInformation(informationDto: InformationDto, options?: any) {
        return InformationRestServiceApiFp(this.configuration).saveInformation(informationDto, options).then((request) => request(this.axios, this.basePath));
    }
}
